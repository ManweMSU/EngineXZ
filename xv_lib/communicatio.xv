auxilium attributum (meta.attributum_nomen_moduli) = "Liber Communicationis";
auxilium attributum (meta.attributum_creator_moduli) = "Engine Software";
auxilium attributum (meta.attributum_iura_exempli) = "© Engine Software. 2024";
auxilium attributum (meta.attributum_versio) = "1.0.0.1";

[[systema] libera]

spatium errores {
	[error] constatus rete_defectum		= 0x08;
	[sub_error rete_defectum] constatus rete_error_nullus			= 0x00;
	[sub_error rete_defectum] constatus rete_error_ignotus			= 0x01;
	[sub_error rete_defectum] constatus rete_adloquium_occupatum	= 0x02;
	[sub_error rete_defectum] constatus rete_adloquium_paratum_non	= 0x03;
	[sub_error rete_defectum] constatus rete_locale_falsum			= 0x04;
	[sub_error rete_defectum] constatus rete_perventio_servi_nulla	= 0x05;
	[sub_error rete_defectum] constatus rete_perventio_retis_nulla	= 0x06;
	[sub_error rete_defectum] constatus rete_connectio_refusa		= 0x07;
	[sub_error rete_defectum] constatus rete_connectio_demissa		= 0x08;
	[sub_error rete_defectum] constatus rete_protocollum_falsum		= 0x09;
	[sub_error rete_defectum] constatus rete_assectatio_excessa		= 0x0A;
	[sub_error rete_defectum] constatus rete_securitas_falsa		= 0x0B;
	[sub_error rete_defectum] constatus rete_adloquium_nullum		= 0x0C;
}
spatium communicatio {
	structura adloquium hereditat objectum_dynamicum {
		structor (~adloquium) { funda(); }
		convertor (linea) () iacit { responde valor_scriptus; }
		linea valor_scriptus { adipisce iacit virtualis { responde "nullum"; } loca iacit virtualis { iace errores.implantatio_nulla; } }
		!dordo_datorum valor_purus { adipisce iacit virtualis { responde crea(dordo_datorum); } loca iacit virtualis { iace errores.implantatio_nulla; } }
		functio linea_secura ad_lineam() redefini { proba responde valor_scriptus; }
	}
	structura adloquium_localis hereditat adloquium {
		linea nomen;
		structor (~linea nm) iacit { funda nomen(nm); }
		structor (@char nm) iacit { funda nomen(nm); }
		convertor (linea) () iacit { responde valor_scriptus; }
		linea valor_scriptus {
			adipisce iacit redefini { responde nomen; }
			loca iacit redefini { nomen = valor; }
		}
		!dordo_datorum valor_purus {
			adipisce iacit redefini { responde nomen.codifica(linea.codex.ascii, non); }
			loca iacit redefini {
				si (!valor || !valor^.longitudo) iace errores.argumentum_falsum;
				nomen = linea(valor^.data, valor^.longitudo, linea.codex.ascii);
			}
		}
	}
	structura adloquium_ipv4 hereditat adloquium {
		ordo [4] nint8 valor;
		nint16 portus;
		structor (~linea ad) iacit { valor_scriptus = ad; }
		structor (nint8 v0, nint8 v1, nint8 v2, nint8 v3, nint16 p) { funda portus(p); valor[0] = v0; valor[1] = v1; valor[2] = v2; valor[3] = v3; }
		convertor (linea) () iacit { responde valor_scriptus; }
		linea valor_scriptus {
			adipisce iacit redefini {
				si (portus) responde linea(valor[0]) + "." + linea(valor[1]) + "." + linea(valor[2]) + "." + linea(valor[3]) + ":" + linea(portus);
				alioqui responde linea(valor[0]) + "." + linea(valor[1]) + "." + linea(valor[2]) + "." + linea(valor[3]);
			}
			loca iacit redefini {
				int p;
				!dordo_linearum ip;
				si ((p = valor.reperi_primum(":")) >= 0) {
					portus = valor.fragmentum(p + 1, -1).ad_nint32();
					ip = valor.fragmentum(0, p).scinde('.');
				} alioqui {
					portus = 0;
					ip = valor.scinde('.');
				}
				si (ip^.longitudo != 4) iace errores.argumentum_falsum;
				pro (var i : [0, 3]) ego^.valor[i] = ip^[i].ad_nint32();
			}
		}
		!dordo_datorum valor_purus {
			adipisce iacit redefini {
				var resp = crea(dordo_datorum, 1);
				resp^.longitudo = 6;
				memoria.exscribe(resp^.data, @valor, 6);
				responde resp;
			}
			loca iacit redefini {
				si (!valor || valor^.longitudo != 6) iace errores.argumentum_falsum;
				memoria.exscribe(@ego^.valor, valor^.data, 6);
			}
		}
		classis functio adloquium_ipv4 cyclus(nint16 p) { responde adloquium_ipv4(127, 0, 0, 1, p); }
		classis functio adloquium_ipv4 servus(nint16 p) { responde adloquium_ipv4(0, 0, 0, 0, p); }
	}
	structura adloquium_ipv6 hereditat adloquium {
		ordo [8] nint16 valor;
		nint16 portus;
		structor (~linea ad) iacit { valor_scriptus = ad; }
		structor (nint16 v0, nint16 v1, nint16 v2, nint16 v3, nint16 v4, nint16 v5, nint16 v6, nint16 v7, nint16 p) { funda portus(p); valor[0] = v0; valor[1] = v1; valor[2] = v2; valor[3] = v3; valor[4] = v4; valor[5] = v5; valor[6] = v6; valor[7] = v7; }
		convertor (linea) () iacit { responde valor_scriptus; }
		linea valor_scriptus {
			adipisce iacit redefini {
				var ip = "[" +
					linea(nint32(valor[0]), "0123456789abcdef", 4) + ":" + linea(nint32(valor[1]), "0123456789abcdef", 4) + ":" +
					linea(nint32(valor[2]), "0123456789abcdef", 4) + ":" + linea(nint32(valor[3]), "0123456789abcdef", 4) + ":" +
					linea(nint32(valor[4]), "0123456789abcdef", 4) + ":" + linea(nint32(valor[5]), "0123456789abcdef", 4) + ":" +
					linea(nint32(valor[6]), "0123456789abcdef", 4) + ":" + linea(nint32(valor[7]), "0123456789abcdef", 4) + "]";
				si (portus) responde ip + ":" + linea(portus);
				alioqui responde ip;
			}
			loca iacit redefini {
				var ipi = valor.reperi_primum("[");
				var ipe = valor.reperi_ultimum("]");
				si (ipi != 0 || ipe < 0) iace errores.argumentum_falsum;
				var ip = valor.fragmentum(ipi + 1, ipe - ipi - 1).scinde(':');
				si (valor.longitudo > ipe + 1) {
					si (valor[ipe + 1] == char(':')) {
						portus = valor.fragmentum(ipe + 2, -1).ad_nint32();
					} alioqui iace errores.argumentum_falsum;
				} alioqui portus = 0;
				pro (var i : [0, 7]) ego^.valor[i] = 0;
				int s = 0;
				pro (var i : ip^) {
					si (!ip^[i].longitudo) exi;
					si (ip^[i].reperi_primum(".") >= 0) {
						si (s > 6) iace errores.argumentum_falsum;
						adloquium_ipv4 v4(ip^[i]);
						ego^.valor[s] = (int(v4.valor[0]) << 8) | int(v4.valor[1]);
						ego^.valor[s + 1] = (int(v4.valor[2]) << 8) | int(v4.valor[3]);
						s += 2;
					} alioqui {
						si (s > 7) iace errores.argumentum_falsum;
						ego^.valor[s] = ip^[i].ad_nint32(linea.radix_sextadecima);
						s++;
					}
				}
				s = 7;
				pro (var i : ~ip^) {
					si (!ip^[i].longitudo) exi;
					si (ip^[i].reperi_primum(".") >= 0) {
						si (s < 1) iace errores.argumentum_falsum;
						adloquium_ipv4 v4(ip^[i]);
						ego^.valor[s - 1] = (int(v4.valor[0]) << 8) | int(v4.valor[1]);
						ego^.valor[s] = (int(v4.valor[2]) << 8) | int(v4.valor[3]);
						s -= 2;
					} alioqui {
						si (s < 0) iace errores.argumentum_falsum;
						ego^.valor[s] = ip^[i].ad_nint32(linea.radix_sextadecima);
						s--;
					}
				}
			}
		}
		!dordo_datorum valor_purus {
			adipisce iacit redefini {
				var resp = crea(dordo_datorum, 1);
				resp^.longitudo = 18;
				memoria.exscribe(resp^.data, @valor, 18);
				responde resp;
			}
			loca iacit redefini {
				si (!valor || valor^.longitudo != 18) iace errores.argumentum_falsum;
				memoria.exscribe(@ego^.valor, valor^.data, 18);
			}
		}
		classis functio adloquium_ipv6 cyclus(nint16 p) { responde adloquium_ipv6(0, 0, 0, 0, 0, 0, 0, 1, p); }
		classis functio adloquium_ipv6 servus(nint16 p) { responde adloquium_ipv6(0, 0, 0, 0, 0, 0, 0, 0, p); }
	}
	structura securitas {
		!dordo_datorum certificatus;
		linea dominatus;
		logicum neglege;
		structor (~linea dom) iacit { funda dominatus(dom); funda neglege(non); }
		structor (@char dom) iacit { funda dominatus(dom); funda neglege(non); }
	}
	structura indentitas {
		!dordo_datorum data;
		linea clavis;
	}
	structura status_erroris {
		nintadl error;
		nintadl suberror;
		functio nihil modera() iacit { si (error) iace error, suberror; }
	}

	genus canale hereditat objectum {
		functio nihil conjunge(~adloquium adl, @status_erroris status, @contextus.labos labos) iacit virtualis pura;
		functio nihil conjunge(~adloquium adl, ~securitas sec, @status_erroris status, @contextus.labos labos) iacit virtualis pura;
		functio nihil mitte(@dordo_datorum data, @status_erroris status, @int longitudo_processa, @contextus.labos labos) iacit virtualis pura;
		functio nihil admitte(int longitudo, @status_erroris status, @!dordo_datorum data, @contextus.labos labos) iacit virtualis pura;
		functio nihil clode(logicum ultime) iacit virtualis pura;

		functio nihil conjunge_synchrone(~adloquium adl) iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			conjunge(adl, @error, lab);
			lab^.opperire();
			error.modera();
		}
		functio nihil conjunge_synchrone(~adloquium adl, ~securitas sec) iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			conjunge(adl, sec, @error, lab);
			lab^.opperire();
			error.modera();
		}
		functio int mitte_synchrone(@dordo_datorum data) iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			int resp;
			mitte(data, @error, @resp, lab);
			lab^.opperire();
			error.modera();
			responde resp;
		}
		functio !dordo_datorum admitte_synchrone(int longitudo) iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			!dordo_datorum resp;
			admitte(longitudo, @error, @resp, lab);
			lab^.opperire();
			error.modera();
			responde resp;
		}
	}
	genus attentor hereditat objectum {
		functio nihil adnecte(~adloquium adl) iacit virtualis pura;
		functio nihil adnecte(~adloquium adl, ~indentitas ind) iacit virtualis pura;
		functio nihil accipe(int limes, @status_erroris status, @!canale can, @!adloquium adl, @contextus.labos labos) iacit virtualis pura;
		functio nihil clode() iacit virtualis pura;

		functio !canale accipe_synchrone() iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			!canale resp;
			accipe(1, @error, @resp, nullus, lab);
			lab^.opperire();
			error.modera();
			responde resp;
		}
		functio !canale accipe_synchrone(~!adloquium adloquium_novum) iacit {
			var lab = crea(_labos_synchronizandi);
			status_erroris error;
			!canale resp;
			accipe(1, @error, @resp, @adloquium_novum, lab);
			lab^.opperire();
			error.modera();
			responde resp;
		}
	}

	genus _labos_synchronizandi hereditat contextus.labos_opperitus {
		structor () iacit {}
		functio nihil exeque(@objectum) redefini { valor_publicus_signale_opperirendi^.erige(); }
		functio nihil opperire() { valor_publicus_signale_opperirendi^.opperire(); }
	}
	structura virtualis _fabricatio_adloquiorum {
		functio !adloquium_localis crea_localis() virtualis iacit { var resp = crea(adloquium_localis); responde resp; }
		functio !adloquium_ipv4 crea_ipv4() virtualis iacit { var resp = crea(adloquium_ipv4); responde resp; }
		functio !adloquium_ipv6 crea_ipv6() virtualis iacit { var resp = crea(adloquium_ipv6); responde resp; }
	}
	dura _fabricatio_adloquiorum {
		var _fabricatio_adloquiorum globalis;
	}
	genus _labos_conjungendi hereditat contextus.labos {
		status_erroris valor_publicus_status_operationis;
		structor () {}
		functio nihil exeque(@objectum ctx) redefini {}
		classis functio nihil age(@_labos_conjungendi lab, @canale cnl, ~adloquium adl, ~securitas sec) iacit {
			cnl^.conjunge(adl, sec, @lab^.valor_publicus_status_operationis, lab);
		}
		classis functio nihil age(@_labos_conjungendi lab, @canale cnl, ~adloquium adl) iacit {
			cnl^.conjunge(adl, @lab^.valor_publicus_status_operationis, lab);
		}
	}
	genus _labos_mittendi hereditat contextus.labos {
		status_erroris valor_publicus_status_operationis;
		int valor_publicus_longitudo_missa;
		structor () {}
		functio nihil exeque(@objectum ctx) redefini {}
		classis functio nihil age(@_labos_mittendi lab, @canale cnl, @dordo_datorum data) iacit {
			cnl^.mitte(data, @lab^.valor_publicus_status_operationis, @lab^.valor_publicus_longitudo_missa, lab);
		}
	}
	genus _labos_admittendi hereditat contextus.labos {
		status_erroris valor_publicus_status_operationis;
		!dordo_datorum valor_publicus_data_recepta;
		structor () {}
		functio nihil exeque(@objectum ctx) redefini {}
		classis functio nihil age(@_labos_admittendi lab, @canale cnl, int longitudo) iacit {
			cnl^.admitte(longitudo, @lab^.valor_publicus_status_operationis, @lab^.valor_publicus_data_recepta, lab);
		}
	}
	genus _labos_accipendi hereditat contextus.labos {
		status_erroris valor_publicus_status_operationis;
		!canale valor_publicus_canale_novum;
		!adloquium valor_publicus_adloquium_novum;
		structor () {}
		functio nihil exeque(@objectum ctx) redefini {}
		classis functio nihil age(@_labos_accipendi lab, @attentor att, int limes) iacit {
			att^.accipe(limes, @lab^.valor_publicus_status_operationis, @lab^.valor_publicus_canale_novum, @lab^.valor_publicus_adloquium_novum, lab);
		}
	}

	praeforma operator conjunge_canale(C, A) { .communicatio._labos_conjungendi.age(.communicatio._labos_conjungendi ## { $_ }, $C, $A) }
	praeforma operator conjunge_canale_secure(C, A, S) { .communicatio._labos_conjungendi.age(.communicatio._labos_conjungendi ## { $_ }, $C, $A, $S) }
	praeforma operator mitte_data(C, D) { .communicatio._labos_mittendi.age(.communicatio._labos_mittendi ## { $_ }, $C, $D) }
	praeforma operator admitte_data(C, L) { .communicatio._labos_admittendi.age(.communicatio._labos_admittendi ## { $_ }, $C, $L) }
	praeforma operator accipe_canale(A, L) { .communicatio._labos_accipendi.age(.communicatio._labos_accipendi ## { $_ }, $A, $L) }

	[[importa] "cm_ca"]	functio !attentor _crea_attentorem(~_fabricatio_adloquiorum fa) iacit;
	[[importa] "cm_la"]	functio !ordo !adloquium _lege_adloquia(~_fabricatio_adloquiorum fa, ~linea dominatus, nint16 portus, @nihil genus_adloquii) iacit;

	[[importa] "cm_cc"]	functio !canale crea_canale() iacit;
						functio !attentor crea_attentorem() iacit { responde _crea_attentorem(_fabricatio_adloquiorum.globalis); }
						functio !ordo !adloquium lege_adloquia(~linea dominatus, nint16 portus, @nihil genus_adloquii) iacit { responde _lege_adloquia(_fabricatio_adloquiorum.globalis, dominatus, portus, genus_adloquii); }

	[[importa] "cm_pd"]	functio linea dominatus_ex_punycodice(~linea ln) iacit;
	[[importa] "cm_dp"]	functio linea dominatus_ad_punycodicem(~linea ln) iacit;
	[[importa] "cm_pl"]	functio linea linea_ex_punycodice(~linea ln) iacit;
	[[importa] "cm_lp"]	functio linea linea_ad_punycodicem(~linea ln) iacit;
	[[importa] "cm_bd"]	functio !dordo_datorum data_ex_base64(~linea ln) iacit;
	[[importa] "cm_db"]	functio linea data_ad_basem64(@nihil data, int longitudo) iacit;

	[[importa] "cm_in"] [[initium]]	functio nihil _ini_retem() iacit;
	[[importa] "cm_fi"] [[finis]]	functio nihil _fini_retem();
}
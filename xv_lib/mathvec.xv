auxilium attributum ("NomenModuli") = "Liber Algebrae Vectorum";
auxilium attributum ("CreatorModuli") = "Engine Software";
auxilium attributum ("IuraExempli") = "© Engine Software. 2024";
auxilium attributum ("Versio") = "1.0.0.1";

[[systema] libera]

structura frac2 {
	frac x; frac y;
	[[positus] "0"] ordo [2] frac _c;

	frac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_SQRT_32:4=>4(@FP_REDUCE_32:8=>4(@FP_MUL_32:8 8=>8(@PTR_FOLLOW:W 1=>8(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>8(S))))) } }
	} }
	frac2 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~frac2 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1])) } } }
	structor (frac s) { funda x(s); funda y(s); }
	structor (frac ix, frac iy) { funda x(ix); funda y(iy); }
	[[xa]] [[inline]] functio frac2 operator - () {
		INTERFACE W 1 : THIS => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_NEG_32:8=>8(@PTR_FOLLOW:W 1=>8(A[0]))) } }
	}
	[[xa]] functio ~frac2 operator = (~frac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac2 operator += (~frac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @FP_ADD_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac2 operator -= (~frac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @FP_SUB_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac2 operator *= (~frac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @FP_MUL_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac2 operator /= (~frac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @FP_DIV_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio frac2 operator + (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_ADD_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac2 operator - (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_SUB_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac2 operator * (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_MUL_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac2 operator / (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_DIV_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_32:8 8=>1(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_32:8 8=>1(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1)", x, y); }
	[[inline]] functio ~frac operator [] (int i) { responde _c[i]; }
}
structura frac3 {
	frac x; frac y; frac z;
	[[positus] "0"] ordo [3] frac _c;
	[[positus] "0"] frac2 xy;
	[[positus] "4"] frac2 yz;

	frac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_SQRT_32:4=>4(@FP_REDUCE_32:12=>4(@FP_MUL_32:12 12=>12(@PTR_FOLLOW:W 1=>12(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>12(S))))) } }
	} }
	frac3 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~frac3 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1])) } } }
	structor (frac s) { funda x(s); funda y(s); funda z(s); }
	structor (frac ix, frac iy, frac iz) { funda x(ix); funda y(iy); funda z(iz); }
	[[xa]] [[inline]] functio frac3 operator - () {
		INTERFACE W 1 : THIS => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_NEG_32:12=>12(@PTR_FOLLOW:W 1=>12(A[0]))) } }
	}
	[[xa]] functio ~frac3 operator = (~frac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac3 operator += (~frac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @FP_ADD_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac3 operator -= (~frac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @FP_SUB_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac3 operator *= (~frac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @FP_MUL_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac3 operator /= (~frac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @FP_DIV_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio frac3 operator + (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_ADD_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac3 operator - (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_SUB_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac3 operator * (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_MUL_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac3 operator / (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_DIV_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_32:12 12=>1(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_32:12 12=>1(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1, %2)", x, y, z); }
	[[inline]] functio ~frac operator [] (int i) { responde _c[i]; }
}
structura frac4 {
	frac x; frac y; frac z; frac w;
	[[positus] "0"] ordo [4] frac _c;
	[[positus] "0"] frac2 xy;
	[[positus] "4"] frac2 yz;
	[[positus] "8"] frac2 zw;
	[[positus] "0"] frac3 xyz;
	[[positus] "4"] frac3 yzw;

	frac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_SQRT_32:4=>4(@FP_REDUCE_32:16=>4(@FP_MUL_32:16 16=>16(@PTR_FOLLOW:W 1=>16(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>16(S))))) } }
	} }
	frac4 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~frac4 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])) } } }
	structor (frac s) { funda x(s); funda y(s); funda z(s); funda w(s); }
	structor (frac ix, frac iy, frac iz, frac iw) { funda x(ix); funda y(iy); funda z(iz); funda w(iw); }
	[[xa]] [[inline]] functio frac4 operator - () {
		INTERFACE W 1 : THIS => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_NEG_32:16=>16(@PTR_FOLLOW:W 1=>16(A[0]))) } }
	}
	[[xa]] functio ~frac4 operator = (~frac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac4 operator += (~frac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_ADD_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac4 operator -= (~frac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_SUB_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac4 operator *= (~frac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_MUL_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~frac4 operator /= (~frac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_DIV_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio frac4 operator + (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_ADD_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac4 operator - (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_SUB_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac4 operator * (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_MUL_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio frac4 operator / (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_DIV_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_32:16 16=>1(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_32:16 16=>1(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1, %2, %3)", x, y, z, w); }
	[[inline]] functio ~frac operator [] (int i) { responde _c[i]; }
}

structura dfrac2 {
	dfrac x; dfrac y;
	[[positus] "0"] ordo [2] dfrac _c;

	dfrac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_SQRT_64:8=>8(@FP_REDUCE_64:16=>8(@FP_MUL_64:16 16=>16(@PTR_FOLLOW:W 1=>16(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>16(S))))) } }
	} }
	dfrac2 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~dfrac2 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])) } } }
	structor (dfrac s) { funda x(s); funda y(s); }
	structor (dfrac ix, dfrac iy) { funda x(ix); funda y(iy); }
	[[xa]] [[inline]] functio dfrac2 operator - () {
		INTERFACE W 1 : THIS => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_NEG_64:16=>16(@PTR_FOLLOW:W 1=>16(A[0]))) } }
	}
	[[xa]] functio ~dfrac2 operator = (~dfrac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac2 operator += (~dfrac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_ADD_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac2 operator -= (~dfrac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_SUB_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac2 operator *= (~dfrac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_MUL_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac2 operator /= (~dfrac2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @FP_DIV_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio dfrac2 operator + (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_ADD_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac2 operator - (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_SUB_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac2 operator * (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_MUL_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac2 operator / (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_DIV_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_64:16 16=>1(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_64:16 16=>1(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1)", x, y); }
	[[inline]] functio ~dfrac operator [] (int i) { responde _c[i]; }
}
structura dfrac3 {
	dfrac x; dfrac y; dfrac z;
	[[positus] "0"] ordo [3] dfrac _c;
	[[positus] "0"] dfrac2 xy;
	[[positus] "8"] dfrac2 yz;

	dfrac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_SQRT_64:8=>8(@FP_REDUCE_64:24=>8(@FP_MUL_64:24 24=>24(@PTR_FOLLOW:W 1=>24(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>24(S))))) } }
	} }
	dfrac3 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~dfrac3 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1])) } } }
	structor (dfrac s) { funda x(s); funda y(s); funda z(s); }
	structor (dfrac ix, dfrac iy, dfrac iz) { funda x(ix); funda y(iy); funda z(iz); }
	[[xa]] [[inline]] functio dfrac3 operator - () {
		INTERFACE W 1 : THIS => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_NEG_64:24=>24(@PTR_FOLLOW:W 1=>24(A[0]))) } }
	}
	[[xa]] functio ~dfrac3 operator = (~dfrac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac3 operator += (~dfrac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @FP_ADD_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac3 operator -= (~dfrac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @FP_SUB_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac3 operator *= (~dfrac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @FP_MUL_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac3 operator /= (~dfrac3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @FP_DIV_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio dfrac3 operator + (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_ADD_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac3 operator - (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_SUB_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac3 operator * (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_MUL_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac3 operator / (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_DIV_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_64:24 24=>1(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_64:24 24=>1(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1, %2)", x, y, z); }
	[[inline]] functio ~dfrac operator [] (int i) { responde _c[i]; }
}
structura dfrac4 {
	dfrac x; dfrac y; dfrac z; dfrac w;
	[[positus] "0"] ordo [4] dfrac _c;
	[[positus] "0"] dfrac2 xy;
	[[positus] "8"] dfrac2 yz;
	[[positus] "16"] dfrac2 zw;
	[[positus] "0"] dfrac3 xyz;
	[[positus] "8"] dfrac3 yzw;

	dfrac longitudo { [[xa]] [[inline]] adipisce {
		INTERFACE W 1 : THIS => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_SQRT_64:8=>8(@FP_REDUCE_64:32=>8(@FP_MUL_64:32 32=>32(@PTR_FOLLOW:W 1=>32(@SPLIT:W 1=>W 1(A[0])), @PTR_FOLLOW:W 1=>32(S))))) } }
	} }
	dfrac4 normativus { adipisce { responde ego^ / longitudo; } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~dfrac4 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1])) } } }
	structor (dfrac s) { funda x(s); funda y(s); funda z(s); funda w(s); }
	structor (dfrac ix, dfrac iy, dfrac iz, dfrac iw) { funda x(ix); funda y(iy); funda z(iz); funda w(iw); }
	[[xa]] [[inline]] functio dfrac4 operator - () {
		INTERFACE W 1 : THIS => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_NEG_64:32=>32(@PTR_FOLLOW:W 1=>32(A[0]))) } }
	}
	[[xa]] functio ~dfrac4 operator = (~dfrac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac4 operator += (~dfrac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @FP_ADD_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac4 operator -= (~dfrac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @FP_SUB_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac4 operator *= (~dfrac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @FP_MUL_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] functio ~dfrac4 operator /= (~dfrac4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @FP_DIV_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	[[xa]] [[inline]] classis functio dfrac4 operator + (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_ADD_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac4 operator - (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_SUB_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac4 operator * (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_MUL_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio dfrac4 operator / (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_DIV_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator == (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @FP_EQ_64:32 32=>1(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1]))) } }
	}
	[[xa]] [[inline]] classis functio logicum operator != (~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 1
		CODE { RET { @BLT:1 1=>1(R, @ZERO:1=>1(@FP_EQ_64:32 32=>1(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1])))) } }
	}
	convertor (linea) () iacit { responde linea.forma("(%0, %1, %2, %3)", x, y, z, w); }
	[[inline]] functio ~dfrac operator [] (int i) { responde _c[i]; }
}

dura frac2 {
	[[xa]] [[inline]] convertor (dfrac2) () {
		INTERFACE W 1 : THIS => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_RESIZE_32:8=>16(@PTR_FOLLOW:W 1=>8(A[0]))) } }
	}
}
dura frac3 {
	[[xa]] [[inline]] convertor (dfrac3) () {
		INTERFACE W 1 : THIS => 24 : OBJECT
		CODE { RET { @BLT:24 24=>24(R, @FP_RESIZE_32:12=>24(@PTR_FOLLOW:W 1=>12(A[0]))) } }
	}
}
dura frac4 {
	[[xa]] [[inline]] convertor (dfrac4) () {
		INTERFACE W 1 : THIS => 32 : OBJECT
		CODE { RET { @BLT:32 32=>32(R, @FP_RESIZE_32:16=>32(@PTR_FOLLOW:W 1=>16(A[0]))) } }
	}
}
dura dfrac2 {
	[[xa]] [[inline]] convertor (frac2) () {
		INTERFACE W 1 : THIS => 8 : OBJECT
		CODE { RET { @BLT:8 8=>8(R, @FP_RESIZE_64:16=>8(@PTR_FOLLOW:W 1=>16(A[0]))) } }
	}
}
dura dfrac3 {
	[[xa]] [[inline]] convertor (frac3) () {
		INTERFACE W 1 : THIS => 12 : OBJECT
		CODE { RET { @BLT:12 12=>12(R, @FP_RESIZE_64:24=>12(@PTR_FOLLOW:W 1=>24(A[0]))) } }
	}
}
dura dfrac4 {
	[[xa]] [[inline]] convertor (frac4) () {
		INTERFACE W 1 : THIS => 16 : OBJECT
		CODE { RET { @BLT:16 16=>16(R, @FP_RESIZE_64:32=>16(@PTR_FOLLOW:W 1=>32(A[0]))) } }
	}
}

spatium math {
	[[xa]] [[inline]] functio frac prs(~frac2 a, ~frac2 b) {
		INTERFACE W 1 W 1 => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_REDUCE_32:8=>4(@FP_MUL_32:8 8=>8(@PTR_FOLLOW:W 1=>8(A[0]), @PTR_FOLLOW:W 1=>8(A[1])))) } }
	}
	[[xa]] [[inline]] functio frac prs(~frac3 a, ~frac3 b) {
		INTERFACE W 1 W 1 => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_REDUCE_32:12=>4(@FP_MUL_32:12 12=>12(@PTR_FOLLOW:W 1=>12(A[0]), @PTR_FOLLOW:W 1=>12(A[1])))) } }
	}
	[[xa]] [[inline]] functio frac prs(~frac4 a, ~frac4 b) {
		INTERFACE W 1 W 1 => 4 : FLOAT
		CODE { RET { @BLT:4 4=>4(R, @FP_REDUCE_32:16=>4(@FP_MUL_32:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])))) } }
	}
	[[xa]] [[inline]] functio dfrac prs(~dfrac2 a, ~dfrac2 b) {
		INTERFACE W 1 W 1 => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_REDUCE_64:16=>8(@FP_MUL_64:16 16=>16(@PTR_FOLLOW:W 1=>16(A[0]), @PTR_FOLLOW:W 1=>16(A[1])))) } }
	}
	[[xa]] [[inline]] functio dfrac prs(~dfrac3 a, ~dfrac3 b) {
		INTERFACE W 1 W 1 => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_REDUCE_64:24=>8(@FP_MUL_64:24 24=>24(@PTR_FOLLOW:W 1=>24(A[0]), @PTR_FOLLOW:W 1=>24(A[1])))) } }
	}
	[[xa]] [[inline]] functio dfrac prs(~dfrac4 a, ~dfrac4 b) {
		INTERFACE W 1 W 1 => 8 : FLOAT
		CODE { RET { @BLT:8 8=>8(R, @FP_REDUCE_64:32=>8(@FP_MUL_64:32 32=>32(@PTR_FOLLOW:W 1=>32(A[0]), @PTR_FOLLOW:W 1=>32(A[1])))) } }
	}
	functio frac3 prv(~frac3 a, ~frac3 b) { responde frac3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x); }
	functio dfrac3 prv(~dfrac3 a, ~dfrac3 b) { responde dfrac3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x); }
}
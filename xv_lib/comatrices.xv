auxilium attributum ("NomenModuli") = "Liber Algebrae Matricum Complexorum";
auxilium attributum ("CreatorModuli") = "Engine Software";
auxilium attributum ("IuraExempli") = "© Engine Software. 2024";
auxilium attributum ("Versio") = "1.0.0.1";

[[systema] libera]

importa matrices;
importa mathvcom;

structura complex2x2 {
	ordo [2] complex2 series;

	complex2x2 transposita { adipisce { responde complex2x2(ego^(0), ego^(1)); } }
	complex tractus { adipisce { responde series[0][0] + series[1][1]; } }
	complex det { adipisce { responde series[0, 0] * series[1, 1] - series[0, 1] * series[1, 0]; } }
	complex2x2 inversa { adipisce { var D = det; responde complex2x2(complex2(series[1, 1], -series[0, 1]) / D, complex2(-series[1, 0], series[0, 0]) / D); } }
	complex2x2 conjugata { adipisce { responde complex2x2(series[0].conjugatus, series[1].conjugatus); } }
	dfrac2x2 Re { adipisce { responde dfrac2x2(series[0].Re, series[1].Re); } }
	dfrac2x2 Im { adipisce { responde dfrac2x2(series[0].Im, series[1].Im); } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~complex2x2 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:64 64=>64(@PTR_FOLLOW:W 1=>64(A[0]), @PTR_FOLLOW:W 1=>64(A[1])) } } }
	[[convertor] "extendens"] structor (dfrac2x2 re) { series[0] = complex2(re[0]); series[1] = complex2(re[1]); }
	[[convertor] "extendens:pretiosus"] structor (complex diag) { series[0] = complex2(diag, 0.0); series[1] = complex2(0.0, diag); }
	[[convertor] "extendens:pretiosus"] structor (complex2 diag) { series[0] = complex2(diag.x, 0.0); series[1] = complex2(0.0, diag.y); }
	structor (complex2 s1, complex2 s2) { series[0] = s1; series[1] = s2; }
	functio complex2x2 operator - () { responde complex2x2(-series[0], -series[1]); }
	[[xa]] functio ~complex2x2 operator = (~complex2x2 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:64 64=>64(@PTR_FOLLOW:W 1=>64(A[0]), @PTR_FOLLOW:W 1=>64(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	functio ~complex2x2 operator += (~complex2x2 src) { series[0] += src[0]; series[1] += src[1]; responde ego^; }
	functio ~complex2x2 operator -= (~complex2x2 src) { series[0] -= src[0]; series[1] -= src[1]; responde ego^; }
	functio ~complex2x2 operator *= (~complex2x2 src) { ego^ = ego^ * src; responde ego^; }
	classis functio complex2x2 operator + (~complex2x2 a, ~complex2x2 b) { responde complex2x2(a[0] + b[0], a[1] + b[1]); }
	classis functio complex2x2 operator - (~complex2x2 a, ~complex2x2 b) { responde complex2x2(a[0] - b[0], a[1] - b[1]); }
	classis functio complex2x2 operator * (~complex2x2 a, ~complex2x2 b) {
		complex2x2 r;
		pro (var i : [0, 1]) pro (var j : [0, 1]) {
			complex A = 0.0;
			pro (var k : [0, 1]) A += a[i, k] * b[k, j];
			r[i, j] = A;
		}
		responde r;
	}
	classis functio complex2 operator * (~complex2x2 a, ~complex2 b) {
		complex2 r;
		pro (var i : [0, 1]) {
			complex A = 0.0;
			pro (var k : [0, 1]) A += a[i, k] * b[k];
			r[i] = A;
		}
		responde r;
	}
	classis functio logicum operator == (~complex2x2 a, ~complex2x2 b) { responde a.series[0] == b.series[0] && a.series[1] == b.series[1]; }
	classis functio logicum operator != (~complex2x2 a, ~complex2x2 b) { responde a.series[0] != b.series[0] || a.series[1] != b.series[1]; }
	[[convertor] "extendens:pretiosus"] convertor (linea) () iacit { responde linea.forma("%0\n%1\n", series[0], series[1]); }
	[[inline]] functio ~complex2 operator [] (int i) { responde series[i]; }
	[[inline]] functio ~complex operator [] (int i, int j) { responde series[i]._c[j]; }
	functio complex2 operator () (int i) { responde complex2(series[0][i], series[1][i]); }
}
structura complex3x3 {
	ordo [3] complex3 series;

	complex3x3 transposita { adipisce { responde complex3x3(ego^(0), ego^(1), ego^(2)); } }
	complex tractus { adipisce { responde series[0][0] + series[1][1] + series[2][2]; } }
	complex det { adipisce { responde series[0, 0] * (series[1, 1] * series[2, 2] - series[2, 1] * series[1, 2]) +
			series[1, 0] * (series[2, 1] * series[0, 2] - series[0, 1] * series[2, 2]) +
			series[2, 0] * (series[0, 1] * series[1, 2] - series[0, 2] * series[1, 1]);
	} }
	complex3x3 inversa { adipisce {
		var m_12_12 = series[1, 1] * series[2, 2] - series[2, 1] * series[1, 2];
		var m_02_12 = series[0, 2] * series[2, 1] - series[0, 1] * series[2, 2];
		var m_01_12 = series[0, 1] * series[1, 2] - series[0, 2] * series[1, 1];
		var D = series[0, 0] * m_12_12 + series[1, 0] * m_02_12 + series[2, 0] * m_01_12;
		responde complex3x3(
			complex3(m_12_12, m_02_12, m_01_12) / D,
			complex3(series[1, 2] * series[2, 0] - series[1, 0] * series[2, 2],
				series[0, 0] * series[2, 2] - series[0, 2] * series[2, 0],
				series[0, 2] * series[1, 0] - series[0, 0] * series[1, 2]) / D,
			complex3(series[1, 0] * series[2, 1] - series[1, 1] * series[2, 0],
				series[0, 1] * series[2, 0] - series[0, 0] * series[2, 1],
				series[0, 0] * series[1, 1] - series[0, 1] * series[1, 0]) / D);
	} }
	complex3x3 conjugata { adipisce { responde complex3x3(series[0].conjugatus, series[1].conjugatus, series[2].conjugatus); } }
	dfrac3x3 Re { adipisce { responde dfrac3x3(series[0].Re, series[1].Re, series[2].Re); } }
	dfrac3x3 Im { adipisce { responde dfrac3x3(series[0].Im, series[1].Im, series[2].Im); } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~complex3x3 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:144 144=>144(@PTR_FOLLOW:W 1=>144(A[0]), @PTR_FOLLOW:W 1=>144(A[1])) } } }
	[[convertor] "extendens"] structor (dfrac3x3 re) { series[0] = complex3(re[0]); series[1] = complex3(re[1]); series[2] = complex3(re[2]); }
	[[convertor] "extendens:pretiosus"] structor (complex diag) { series[0] = complex3(diag, 0.0, 0.0); series[1] = complex3(0.0, diag, 0.0); series[2] = complex3(0.0, 0.0, diag); }
	[[convertor] "extendens:pretiosus"] structor (complex3 diag) { series[0] = complex3(diag.x, 0.0, 0.0); series[1] = complex3(0.0, diag.y, 0.0); series[2] = complex3(0.0, 0.0, diag.z); }
	structor (complex3 s1, complex3 s2, complex3 s3) { series[0] = s1; series[1] = s2; series[2] = s3; }
	functio complex3x3 operator - () { responde complex3x3(-series[0], -series[1], -series[2]); }
	[[xa]] functio ~complex3x3 operator = (~complex3x3 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:144 144=>144(@PTR_FOLLOW:W 1=>144(A[0]), @PTR_FOLLOW:W 1=>144(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	functio ~complex3x3 operator += (~complex3x3 src) { series[0] += src[0]; series[1] += src[1]; series[2] += src[2]; responde ego^; }
	functio ~complex3x3 operator -= (~complex3x3 src) { series[0] -= src[0]; series[1] -= src[1]; series[2] -= src[2]; responde ego^; }
	functio ~complex3x3 operator *= (~complex3x3 src) { ego^ = ego^ * src; responde ego^; }
	classis functio complex3x3 operator + (~complex3x3 a, ~complex3x3 b) { responde complex3x3(a[0] + b[0], a[1] + b[1], a[2] + b[2]); }
	classis functio complex3x3 operator - (~complex3x3 a, ~complex3x3 b) { responde complex3x3(a[0] - b[0], a[1] - b[1], a[2] - b[2]); }
	classis functio complex3x3 operator * (~complex3x3 a, ~complex3x3 b) {
		complex3x3 r;
		pro (var i : [0, 2]) pro (var j : [0, 2]) {
			complex A = 0.0;
			pro (var k : [0, 2]) A += a[i, k] * b[k, j];
			r[i, j] = A;
		}
		responde r;
	}
	classis functio complex3 operator * (~complex3x3 a, ~complex3 b) {
		complex3 r;
		pro (var i : [0, 2]) {
			complex A = 0.0;
			pro (var k : [0, 2]) A += a[i, k] * b[k];
			r[i] = A;
		}
		responde r;
	}
	classis functio logicum operator == (~complex3x3 a, ~complex3x3 b) { responde a.series[0] == b.series[0] && a.series[1] == b.series[1] && a.series[2] == b.series[2]; }
	classis functio logicum operator != (~complex3x3 a, ~complex3x3 b) { responde a.series[0] != b.series[0] || a.series[1] != b.series[1] || a.series[2] != b.series[2]; }
	[[convertor] "extendens:pretiosus"] convertor (linea) () iacit { responde linea.forma("%0\n%1\n%2\n", series[0], series[1], series[2]); }
	[[inline]] functio ~complex3 operator [] (int i) { responde series[i]; }
	[[inline]] functio ~complex operator [] (int i, int j) { responde series[i]._c[j]; }
	functio complex3 operator () (int i) { responde complex3(series[0][i], series[1][i], series[2][i]); }
}
structura complex4x4 {
	ordo [4] complex4 series;

	complex4x4 transposita { adipisce { responde complex4x4(ego^(0), ego^(1), ego^(2), ego^(3)); } }
	complex tractus { adipisce { responde series[0][0] + series[1][1] + series[2][2] + series[3][3]; } }
	complex det { adipisce {
		var m_23_23 = series[2, 2] * series[3, 3] - series[2, 3] * series[3, 2];
		var m_03_23 = series[0, 2] * series[3, 3] - series[0, 3] * series[3, 2];
		var m_13_23 = series[1, 2] * series[3, 3] - series[1, 3] * series[3, 2];
		var m_12_23 = series[1, 2] * series[2, 3] - series[1, 3] * series[2, 2];
		var m_02_23 = series[0, 2] * series[2, 3] - series[0, 3] * series[2, 2];
		var m_01_23 = series[0, 2] * series[1, 3] - series[0, 3] * series[1, 2];
		responde series[0, 0] * (series[1, 1] * m_23_23 - series[2, 1] * m_13_23 + series[3, 1] * m_12_23) -
			series[1, 0] * (series[0, 1] * m_23_23 - series[2, 1] * m_03_23 + series[3, 1] * m_02_23) +
			series[2, 0] * (series[0, 1] * m_13_23 - series[1, 1] * m_03_23 + series[3, 1] * m_01_23) -
			series[3, 0] * (series[0, 1] * m_12_23 - series[1, 1] * m_02_23 + series[2, 1] * m_01_23);
	} }
	complex4x4 inversa { adipisce {
		var m_23_23 = series[2, 2] * series[3, 3] - series[2, 3] * series[3, 2];
		var m_03_23 = series[0, 2] * series[3, 3] - series[0, 3] * series[3, 2];
		var m_13_23 = series[1, 2] * series[3, 3] - series[1, 3] * series[3, 2];
		var m_12_23 = series[1, 2] * series[2, 3] - series[1, 3] * series[2, 2];
		var m_02_23 = series[0, 2] * series[2, 3] - series[0, 3] * series[2, 2];
		var m_01_23 = series[0, 2] * series[1, 3] - series[0, 3] * series[1, 2];
		var m_23_01 = series[2, 0] * series[3, 1] - series[2, 1] * series[3, 0];
		var m_03_01 = series[0, 0] * series[3, 1] - series[0, 1] * series[3, 0];
		var m_13_01 = series[1, 0] * series[3, 1] - series[1, 1] * series[3, 0];
		var m_12_01 = series[1, 0] * series[2, 1] - series[1, 1] * series[2, 0];
		var m_02_01 = series[0, 0] * series[2, 1] - series[0, 1] * series[2, 0];
		var m_01_01 = series[0, 0] * series[1, 1] - series[0, 1] * series[1, 0];
		var m_123_123 = series[1, 1] * m_23_23 - series[2, 1] * m_13_23 + series[3, 1] * m_12_23;
		var m_023_123 = series[0, 1] * m_23_23 - series[2, 1] * m_03_23 + series[3, 1] * m_02_23;
		var m_013_123 = series[0, 1] * m_13_23 - series[1, 1] * m_03_23 + series[3, 1] * m_01_23;
		var m_012_123 = series[0, 1] * m_12_23 - series[1, 1] * m_02_23 + series[2, 1] * m_01_23;
		var m_123_023 = series[1, 0] * m_23_23 - series[2, 0] * m_13_23 + series[3, 0] * m_12_23;
		var m_023_023 = series[0, 0] * m_23_23 - series[2, 0] * m_03_23 + series[3, 0] * m_02_23;
		var m_013_023 = series[0, 0] * m_13_23 - series[1, 0] * m_03_23 + series[3, 0] * m_01_23;
		var m_012_023 = series[0, 0] * m_12_23 - series[1, 0] * m_02_23 + series[2, 0] * m_01_23;
		var m_123_013 = m_23_01 * series[1, 3] - m_13_01 * series[2, 3] + m_12_01 * series[3, 3];
		var m_023_013 = m_23_01 * series[0, 3] - m_03_01 * series[2, 3] + m_02_01 * series[3, 3];
		var m_013_013 = m_13_01 * series[0, 3] - m_03_01 * series[1, 3] + m_01_01 * series[3, 3];
		var m_012_013 = m_12_01 * series[0, 3] - m_02_01 * series[1, 3] + m_01_01 * series[2, 3];
		var m_123_012 = m_23_01 * series[1, 2] - m_13_01 * series[2, 2] + m_12_01 * series[3, 2];
		var m_023_012 = m_23_01 * series[0, 2] - m_03_01 * series[2, 2] + m_02_01 * series[3, 2];
		var m_013_012 = m_13_01 * series[0, 2] - m_03_01 * series[1, 2] + m_01_01 * series[3, 2];
		var m_012_012 = m_12_01 * series[0, 2] - m_02_01 * series[1, 2] + m_01_01 * series[2, 2];
		var D = series[0, 0] * m_123_123 - series[1, 0] * m_023_123 + series[2, 0] * m_013_123 - series[3, 0] * m_012_123;
		responde complex4x4(complex4(m_123_123, -m_023_123, m_013_123, -m_012_123) / D,
			complex4(-m_123_023, m_023_023, -m_013_023, m_012_023) / D,
			complex4(m_123_013, -m_023_013, m_013_013, -m_012_013) / D,
			complex4(-m_123_012, m_023_012, -m_013_012, m_012_012) / D);
	} }
	complex4x4 conjugata { adipisce { responde complex4x4(series[0].conjugatus, series[1].conjugatus, series[2].conjugatus, series[3].conjugatus); } }
	dfrac4x4 Re { adipisce { responde dfrac4x4(series[0].Re, series[1].Re, series[2].Re, series[3].Re); } }
	dfrac4x4 Im { adipisce { responde dfrac4x4(series[0].Im, series[1].Im, series[2].Im, series[3].Im); } }

	[[xa]] structor () { INTERFACE W 1 : THIS => 0 CODE { RET } }
	[[xa]] structor (~complex4x4 s) { INTERFACE W 1 : THIS W 1 => 0 CODE { RET { @BLT:256 256=>256(@PTR_FOLLOW:W 1=>256(A[0]), @PTR_FOLLOW:W 1=>256(A[1])) } } }
	[[convertor] "extendens"] structor (dfrac4x4 re) { series[0] = complex4(re[0]); series[1] = complex4(re[1]); series[2] = complex4(re[2]); series[3] = complex4(re[3]); }
	[[convertor] "extendens:pretiosus"] structor (complex diag) { series[0] = complex4(diag, 0.0, 0.0, 0.0); series[1] = complex4(0.0, diag, 0.0, 0.0); series[2] = complex4(0.0, 0.0, diag, 0.0); series[3] = complex4(0.0, 0.0, 0.0, diag); }
	[[convertor] "extendens:pretiosus"] structor (complex4 diag) { series[0] = complex4(diag.x, 0.0, 0.0, 0.0); series[1] = complex4(0.0, diag.y, 0.0, 0.0); series[2] = complex4(0.0, 0.0, diag.z, 0.0); series[3] = complex4(0.0, 0.0, 0.0, diag.w); }
	structor (complex4 s1, complex4 s2, complex4 s3, complex4 s4) { series[0] = s1; series[1] = s2; series[2] = s3; series[3] = s4; }
	functio complex4x4 operator - () { responde complex4x4(-series[0], -series[1], -series[2], -series[3]); }
	[[xa]] functio ~complex4x4 operator = (~complex4x4 src) {
		INTERFACE W 1 : THIS W 1 => W 1
		CODE { EVAL { @BLT:256 256=>256(@PTR_FOLLOW:W 1=>256(A[0]), @PTR_FOLLOW:W 1=>256(A[1])) } RET { @BLT:W 1 W 1=>W 1(R, A[0]) } }
	}
	functio ~complex4x4 operator += (~complex4x4 src) { series[0] += src[0]; series[1] += src[1]; series[2] += src[2]; series[3] += src[3]; responde ego^; }
	functio ~complex4x4 operator -= (~complex4x4 src) { series[0] -= src[0]; series[1] -= src[1]; series[2] -= src[2]; series[3] -= src[3]; responde ego^; }
	functio ~complex4x4 operator *= (~complex4x4 src) { ego^ = ego^ * src; responde ego^; }
	classis functio complex4x4 operator + (~complex4x4 a, ~complex4x4 b) { responde complex4x4(a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]); }
	classis functio complex4x4 operator - (~complex4x4 a, ~complex4x4 b) { responde complex4x4(a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3]); }
	classis functio complex4x4 operator * (~complex4x4 a, ~complex4x4 b) {
		complex4x4 r;
		pro (var i : [0, 3]) pro (var j : [0, 3]) {
			complex A = 0.0;
			pro (var k : [0, 3]) A += a[i, k] * b[k, j];
			r[i, j] = A;
		}
		responde r;
	}
	classis functio complex4 operator * (~complex4x4 a, ~complex4 b) {
		complex4 r;
		pro (var i : [0, 3]) {
			complex A = 0.0;
			pro (var k : [0, 3]) A += a[i, k] * b[k];
			r[i] = A;
		}
		responde r;
	}
	classis functio logicum operator == (~complex4x4 a, ~complex4x4 b) { responde a.series[0] == b.series[0] && a.series[1] == b.series[1] && a.series[2] == b.series[2] && a.series[3] == b.series[3]; }
	classis functio logicum operator != (~complex4x4 a, ~complex4x4 b) { responde a.series[0] != b.series[0] || a.series[1] != b.series[1] || a.series[2] != b.series[2] || a.series[3] != b.series[3]; }
	[[convertor] "extendens:pretiosus"] convertor (linea) () iacit { responde linea.forma("%0\n%1\n%2\n%3\n", series[0], series[1], series[2], series[3]); }
	[[inline]] functio ~complex4 operator [] (int i) { responde series[i]; }
	[[inline]] functio ~complex operator [] (int i, int j) { responde series[i]._c[j]; }
	functio complex4 operator () (int i) { responde complex4(series[0][i], series[1][i], series[2][i], series[3][i]); }
}
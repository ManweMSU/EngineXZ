importa canonicalis;
importa limae;
importa consolatorium;

var ~ consolatorium con = consolatorium.currens()^;

structura informatio {
	linea nomen;
	linea func;
	structor (~linea n, ~linea f) iacit { funda nomen(n); funda func(f); }
}

functio nihil dirime(~ordo informatio inf) iacit
{
	per (var i : [0, inf.longitudo - 2]) per (var j : [i + 1, inf.longitudo - 1]) si (inf[j].nomen < inf[i].nomen) inf.permuta(i, j);
}
functio nihil genera(~ordo informatio inf, ~linea praev, int primus, int long, ~scriptio.codificator cdx) iacit
{
	int med = primus + long / 2;
	si (long > 1) {
		cdx.scribe_lineam(praev + "if (string::Compare(routine_name, L\"" + inf[med].nomen + "\") < 0) {");
		genera(inf, praev + "    ", primus, med - primus, cdx);
		cdx.scribe_lineam(praev + "} else {");
		genera(inf, praev + "    ", med, primus + long - med, cdx);
		cdx.scribe_lineam(praev + "}");
	} alioqui si (long == 1) {
		cdx.scribe_lineam(praev + "if (string::Compare(routine_name, L\"" + inf[med].nomen + "\") == 0) return reinterpret_cast<const void *>(&" + inf[med].func + ");");
	}
}

functio nihil primus() introitus iacit
{
	var args = para_argumenta();
	si (args^.longitudo < 3) iace errores.argumentum_falsum;
	var in = scriptio.decodifica(semita(args^[1]).crea_limam(modus_limae.legere, modus_creatoris.aperi_praesens));
	var out = scriptio.codifica(semita(args^[2]).crea_limam(modus_limae.scribere, modus_creatoris.crea_semper));
	ordo linea lineae;
	dum (!in^.finis) { lineae << in^.lege_lineam(); }
	int ini = -1, fin = -1;
	per (var i : lineae) {
		si (lineae[i].reperi_primum("ExposeRoutine") >= 0) ini = i;
		alioqui si (lineae[i].reperi_primum("ExposeInterface") >= 0) fin = i;
	}
	si (ini < 0 || fin < 0) iace errores.efformatio_falsa;
	ordo linea selecti;
	per (var i : [ini + 1, fin - 1]) si (lineae[i].reperi_primum("==") >= 0) selecti << lineae[i];
	ordo informatio inf;
	per (var i : selecti) {
		var ~ ln = selecti[i];
		int nds = ln.reperi_primum("\"");
		int ndd = ln.reperi_ultimum("\"");
		int fds = ln.reperi_ultimum("(");
		int fdd = ln.reperi_ultimum(")");
		si (nds < 0 || ndd < 0 || fds < 0 || fdd < 0) dura;
		inf << informatio(ln.fragmentum(nds + 1, ndd - nds - 1), ln.fragmentum(fds + 1, fdd - fds - 1));
	}
	dirime(inf);
	genera(inf, "", 0, inf.longitudo, out^);
	per (var i : inf) con.scribe_lineam(linea.ex(inf[i]));
}
struct WORLD {
    float4x4 proj;
    float4x4 transform;
    float3 light;
    float ambient;
    float diffusion;
}
struct VERTEX_IN {
    float3 position;
    float3 color;
    float3 normal;
}
struct VERTEX_OUT {
    float3 color;
    float3 normal;
}

vertex VertexShader(
    in  uint                vid     : vertex,
    in  uint                iid     : instance,
    in  WORLD               wdata   : constant[0],
    in  array<VERTEX_IN>    vdata   : buffer[1],
    out VERTEX_OUT          data,
    out float4              pos     : position)
{
    VERTEX_IN v = vdata[vid];
    data.color = v.color;
    data.normal = mul(wdata.transform, float4(v.normal, 0.0)).xyz;
    pos = mul(wdata.transform, float4(v.position, 1.0));
    pos.x += 2.0 * (int(iid) % 3 - 1);
    pos.y += 2.0 * (int(iid) / 3 - 1);
    pos = mul(wdata.proj, pos);
}
pixel PixelShader(
    in  WORLD       wdata   : constant[0],
    in  VERTEX_OUT  vdata,
    out float4      color   : color)
{
    float dp = saturate(dot(-normalize(wdata.light), normalize(vdata.normal)));
    color.rgb = vdata.color * (wdata.ambient + wdata.diffusion * dp);
    color.a = 1.0;
}
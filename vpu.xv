importa consolatorium;

[[xa]] functio nihil test_vpu(@nihil rv) {
	DATA QWORD 0.1
	DATA QWORD 0.2
	DATA QWORD 0.3
	DATA QWORD 0.4
	DATA DWORD 3.0
	DATA DWORD 3.0
	DATA DWORD 3.0
	DATA DWORD 3.0
	DATA QWORD 0x00112233

	INTERFACE W 1:- =>0:-

	CODE {
		EVAL {
			@BLT:32 32=>32(
				@PTR_FOLLOW:W 1=>32(A[0]),
				@FP_RESIZE_32:16=>32(
					@FP_DIV_32:16 16=>16(
						@FP_RESIZE_64:32=>16(D[0]),
						D[32]
					)
				)
			)
		}
		EVAL {
			@BLT:32 32=>32(
				@PTR_FOLLOW:W 1=>32(A[0]),
				@FP_GATHER_64:4:INT 4:FLOAT 8:FLOAT 1:SINT
				=>32(D[48], D[44], D[8], D[48])
			)
		}
		RET
	}
}
[[xa]] functio nihil test_vpu_com(@nihil rv) {
	DATA QWORD 0.0
	DATA QWORD -0.1
	DATA QWORD -0.0
	DATA QWORD 0.1
	DATA QWORD 0.5
	DATA QWORD 0.3
	DATA QWORD 0.2
	DATA QWORD 0.1

	INTERFACE W 1:- =>0:-

	CODE {
		RET {
			@BLT:8 8=>8(
				@PTR_FOLLOW:W 1=>8(A[0]),
				@FP_ZERO_64:16=>8(D[0])
			)
		}
	}
}
[[xa]] functio nihil test_vpu_comf(@nihil rv) {
	DATA DWORD 0.1
	DATA DWORD 0.3
	DATA DWORD 0.5
	DATA DWORD 0.7
	DATA DWORD 0.5
	DATA DWORD 0.3
	DATA DWORD 0.2
	DATA DWORD 0.1

	INTERFACE W 1:- =>0:-

	CODE {
		RET {
			@BLT:8 8=>8(
				@PTR_FOLLOW:W 1=>8(A[0]),
				@FP_GEV_32:16 16=>8(D[0], D[16])
			)
		}
	}
}
[[xa]] functio nihil test_vpu_cvt(@nihil rv) {
	DATA DWORD 2.3
	DATA DWORD 5.8
	DATA DWORD -7.6
	DATA DWORD -10.0

	INTERFACE W 1:- =>0:-

	CODE {
		RET {
			@BLT:8 8=>8(
				@PTR_FOLLOW:W 1=>8(A[0]),
				@FP_INTEGER_32:16=>8(D[0])
			)
		}
	}
}
[[xa]] functio nihil test_vpu_spl(~dfrac r1, ~frac r2, ~int64 r3, ~int16 r4) {
	DATA QWORD 1.1
	DATA QWORD -2.2
	DATA QWORD 3.3
	DATA QWORD -4.4
	DATA DWORD 5.5
	DATA DWORD -6.6
	DATA DWORD 7.7
	DATA DWORD -8.8

	INTERFACE W 1 W 1 W 1 W 1 => 0:-

	CODE {
		RET {
			@FP_SCATTER_32:16
					8:FLOAT 4:FLOAT
					8:INT 2:INT
				=>16(
					@FP_REORDER_32:4 0x0000=>16(
						@FP_REDUCE_32:12=>4(D[32])
					, -),
				@PTR_FOLLOW:W 1=>8(A[0]),
				@PTR_FOLLOW:W 1=>4(A[1]),
				@PTR_FOLLOW:W 1=>8(A[2]),
				@PTR_FOLLOW:W 1=>2(A[3])
			)
			;@FP_SCATTER_64:32
			;		8:FLOAT 4:FLOAT
			;		8:INT 2:INT
			;	=>32(
			;		@FP_REORDER_64:8 0x0000=>32(
			;			@FP_REDUCE_64:32=>8(D[0])
			;		, -),
			;	@PTR_FOLLOW:W 1=>8(A[0]),
			;	@PTR_FOLLOW:W 1=>4(A[1]),
			;	@PTR_FOLLOW:W 1=>8(A[2]),
			;	@PTR_FOLLOW:W 1=>2(A[3])
			;)
		}
	}
}

functio nihil test_16() iacit {
	int16 i = 1;
	var l = linea(i);
	var ~ con = consolatorium.currens()^;
	con.scribe_lineam(l);
}

functio nihil ini() introitus iacit {
	proba {
		var ~ con = consolatorium.currens()^;
		test_16();
		ordo[4] dfrac valor;
		nint64 valor2;
		nint64 valor3;
		ordo[4] int16 valor4;
		test_vpu(@valor);
		con.scribe_lineam(linea.ex(valor));
		test_vpu_com(@valor2);
		con.scribe_lineam(linea(valor2, linea.radix_bina, 8));
		test_vpu_comf(@valor3);
		con.scribe_lineam(linea(valor3, linea.radix_bina, 8));
		test_vpu_cvt(@valor4);
		con.scribe_lineam(linea.ex(valor4));
		dfrac r1;
		frac r2;
		int64 r3;
		int16 r4;
		test_vpu_spl(r1, r2, r3, r4);
		con.scribe_lineam(linea.forma("{%0, %1, %2, %3}", r1, r2, r3, r4));
	}
}
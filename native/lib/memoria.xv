auxilium attributum ("NomenModuli") = "Liber Memoriae";
auxilium attributum ("CreatorModuli") = "Engine Software";
auxilium attributum ("IuraExempli") = "© Engine Software. 2025";
auxilium attributum ("Versio") = "1.0.0.1";

importa cor;

[[systema] librosa]

spatium winapi {
	[[importa] "GetProcessHeap"] [[importa_de] "kernel32"] [stdcall "0"]
	functio nintadl GetProcessHeap();
	[[importa] "HeapAlloc"] [[importa_de] "kernel32"] [stdcall "3"]
	functio @nihil HeapAlloc(nintadl mem, nint modus, nintadl long);
	[[importa] "HeapReAlloc"] [[importa_de] "kernel32"] [stdcall "4"]
	functio @nihil HeapReAlloc(nintadl mem, nint modus, @nihil adloq, nintadl long);
	[[importa] "HeapFree"] [[importa_de] "kernel32"] [stdcall "3"]
	functio logicum HeapFree(nintadl mem, nint modus, @nihil adloq);
}

spatium memoria {
	functio @nihil alloca(nintadl magn)
	{
		si (magn) responde winapi.HeapAlloc(winapi.GetProcessHeap(), 0, magn);
		alioqui responde nullus;
	}
	functio @nihil realloca(@nihil mem, nintadl magn)
	{
		si (mem == nullus) responde alloca(magn);
		si (magn) responde winapi.HeapReAlloc(winapi.GetProcessHeap(), 0, mem, magn);
		alioqui { winapi.HeapFree(winapi.GetProcessHeap(), 0, mem); responde nullus; }
	}
	functio nihil dimitte(@nihil mem) { si (mem != nullus) winapi.HeapFree(winapi.GetProcessHeap(), 0, mem); }
	functio nihil relabe(@nihil mem, nintadl magn) { per (nintadl i = 0; i < magn; i++) (@nint8)(mem)[i] = 0; }
	functio @nihil exscribe(@nihil in, @nihil ex, nintadl magn) { per (nintadl i = 0; i < magn; i++) (@nint8)(in)[i] = (@nint8)(ex)[i]; responde in; }
}

[[xa]] [[inline]] functio nint incrementum_securum(~nint valor) {
	DATA DWORD 1
	INTERFACE W 1=>4:INT
	CODE { RET { @BLT:4 4=>4(R, @AADD:4 4=>4(@PTR_FOLLOW:W 1=>4(A[0]), D[0])) } }
}
[[xa]] [[inline]] functio nint decrementum_securum(~nint valor) {
	DATA DWORD -1
	INTERFACE W 1=>4:INT
	CODE { RET { @BLT:4 4=>4(R, @AADD:4 4=>4(@PTR_FOLLOW:W 1=>4(A[0]), D[0])) } }
}
# ACERVUS 0x1000
# MODUS I386_16
INITUS:
		CALL @ENABLE_A20
		CALL @TEST_A20
		TEST AX, AX
		JZ @INITUS_A20_NO
		LEA AX, [@@LA20_POS]
		PUSH AX
		LEA AX, [@LA20_POS]
		PUSH AX
		CALL ULT @IMPRIME
		ADD SP, 4

		MOV AX, [@@MEMDATA]
		MOV ES, AX
		LEA DI, [@MEMDATA]
		XOR EBX, EBX
		MOV EDX, 0x534D4150
		MOV EAX, 0x0000E820
		MOV ECX, 24
	MEMLOOP:
		INT 0x15
		;JC @MEMLOOP_EXIT
		TEST EBX, EBX
		;JZ @MEMLOOP_EXIT

		MOV EAX, [@MEMDATA1]
		PUSH EAX
		MOV EAX, [@MEMDATA]
		PUSH EAX
		MOV EAX, [@MEMDATA3]
		PUSH EAX
		MOV EAX, [@MEMDATA2]
		PUSH EAX
		MOV EAX, [@MEMDATA5]
		PUSH EAX
		MOV EAX, [@MEMDATA4]
		PUSH EAX

		LEA AX, [@@MEMDESC]
		PUSH AX
		LEA AX, [@MEMDESC]
		PUSH AX
		CALL ULT @IMPRIME
		ADD SP, 28
	
		MOV EAX, 0x0000E820
		MOV ECX, 24
		;JMP @MEMLOOP
	MEMLOOP_EXIT:
		MOV AX, 0x4C00
		INT 0x21

	INITUS_A20_NO:
		LEA AX, [@@LA20_NEG]
		PUSH AX
		LEA AX, [@LA20_NEG]
		PUSH AX
		CALL ULT @IMPRIME
		ADD SP, 4
		MOV AX, 0x4C00
		INT 0x21

LA20_POS:	# DATA 1 'Linea A20 activa est.\n\r\0'
LA20_NEG:	# DATA 1 'Linea A20 inactiva est.\n\r\0'
MEMDATA:	# DATA 4 0
MEMDATA1:	# DATA 4 0
MEMDATA2:	# DATA 4 0
MEMDATA3:	# DATA 4 0
MEMDATA4:	# DATA 4 0
MEMDATA5:	# DATA 4 0
MEMDESC:	# DATA 1 'Dorsum memoriae: %A:%A -- %A:%A; %A:%A\n\r\0'

TEST_A20:
		PUSHF
		PUSH SI
		PUSH DI
		PUSH DS
		PUSH ES
		CLI
		XOR AX, AX
		MOV DS, AX
		MOV SI, 0x0500
		NOT AX
		MOV ES, AX
		MOV DI, 0x0510
		MOV AL, [DS:SI]
		MOV [CS + @TEST_A20_S0], AL
		MOV AL, [ES:DI]
		MOV [CS + @TEST_A20_S1], AL
		MOV AL, 0
		MOV AH, 1
		MOV [DS:SI], AL
		MOV [ES:DI], AH
		MOV AL, [DS:SI]
		CMP AL, [ES:DI]
		JNE @TEST_A20_BRANCH
		DEC AH
	TEST_A20_BRANCH:
		MOV AL, [CS + @TEST_A20_S0]
		MOV [DS:SI], AL
		MOV AL, [CS + @TEST_A20_S1]
		MOV [ES:DI], AL
		SHR AX, 8
		STI
		POP ES
		POP DS
		POP DI
		POP SI
		POPF
		RET
	TEST_A20_S0: # DATA 1 0
	TEST_A20_S1: # DATA 1 0
ENABLE_A20:
	PUSH AX
	IN AL, 0x92
	OR AL, 2
	OUT 0x92, AL
	POP AX
	RET

# SEGMENTUM
IMPRIME_NFMT:
		PUSHA
		MOV BP, SP
		PUSH DS
		LDS SI, [BP + 20]
	IMPRIME_NFMT_LOOP:
		MOV DL, [SI]
		CMP DL, 0
		JE @IMPRIME_NFMT_EXIT
		MOV AH, 0x02
		INT 0x21
		INC SI
		JMP @IMPRIME_NFMT_LOOP
	IMPRIME_NFMT_EXIT:
		POP DS
		POPA
		RET ULT 4
IMPRIME:
		PUSHA
		MOV BP, SP
		PUSH DS
		LDS SI, [BP + 20]
		LEA DI, [BP + 24]
	IMPRIME_LOOP:
		MOV DL, [SI]
		CMP DL, 0
		JE @IMPRIME_EXIT
		CMP DL, '%'
		JE @IMPRIME_FMT
		MOV AH, 0x02
		INT 0x21
		INC SI
		JMP @IMPRIME_LOOP
	IMPRIME_FMT:; % - escape, A - address, C - character, I - integer, S - string, X - hexadecimal
		INC SI
		MOV DL, [SI]
		INC SI
		CMP DL, 0
		JE @IMPRIME_EXIT
		CMP DL, '%'
		JE @IMPRIME_FMT_ESC
		CMP DL, 'A'
		JE @IMPRIME_FMT_A
		CMP DL, 'C'
		JE @IMPRIME_FMT_C
		CMP DL, 'I'
		JE @IMPRIME_FMT_I
		CMP DL, 'S'
		JE @IMPRIME_FMT_S
		CMP DL, 'X'
		JE @IMPRIME_FMT_X
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_ESC:
		MOV AH, 0x02
		INT 0x21
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_A:
		MOV AX, [SS:DI + 2]
		PUSH DI
		PUSH DS
		MOV DI, CS
		MOV DS, DI
		LEA BX, [@IMPRIME_BUFFER]
		MOV DI, 16
		MOV DX, 4
		CALL ULT @STRING_OF_INT
		PUSH CS
		PUSH BX
		CALL ULT @IMPRIME_NFMT
		POP DS
		POP DI
		MOV DL, ':'
		MOV AH, 0x02
		INT 0x21
		MOV AX, [SS:DI]
		PUSH DI
		PUSH DS
		MOV DI, CS
		MOV DS, DI
		LEA BX, [@IMPRIME_BUFFER]
		MOV DI, 16
		MOV DX, 4
		CALL ULT @STRING_OF_INT
		PUSH CS
		PUSH BX
		CALL ULT @IMPRIME_NFMT
		POP DS
		POP DI
		ADD DI, 4
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_C:
		MOV DL, [SS:DI]
		ADD DI, 2
		MOV AH, 0x02
		INT 0x21
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_I:
		MOV AX, [SS:DI]
		PUSH DI
		PUSH DS
		MOV DI, CS
		MOV DS, DI
		LEA BX, [@IMPRIME_BUFFER]
		MOV DI, 10
		MOV DX, 1
		CALL ULT @STRING_OF_INT
		PUSH CS
		PUSH BX
		CALL ULT @IMPRIME_NFMT
		POP DS
		POP DI
		ADD DI, 2
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_S:
		MOV AX, [SS:DI + 2]
		PUSH AX
		MOV AX, [SS:DI]
		PUSH AX
		CALL ULT @IMPRIME_NFMT
		ADD DI, 4
		JMP @IMPRIME_LOOP
	IMPRIME_FMT_X:
		MOV AX, [SS:DI]
		PUSH DI
		PUSH DS
		MOV DI, CS
		MOV DS, DI
		LEA BX, [@IMPRIME_BUFFER]
		MOV DI, 16
		MOV DX, 4
		CALL ULT @STRING_OF_INT
		PUSH CS
		PUSH BX
		CALL ULT @IMPRIME_NFMT
		POP DS
		POP DI
		ADD DI, 2
		JMP @IMPRIME_LOOP
	IMPRIME_EXIT:
		POP DS
		POPA
		RET ULT
	IMPRIME_BUFFER: # DATA 1 '\0\0\0\0\0\0\0\0'
STRING_OF_INT:; DS:BX - buffer, AX - number, DI - radix, DX - minimal length, on return BX - shifted buffer
		PUSH SI
		PUSH CX
		XOR CX, CX
		ADD BX, 7
		MOV [BX], CL
	STRING_OF_INT_LOOP:
		CMP AX, 0
		JNE @STRING_OF_INT_DEX
		CMP DX, 0
		JG @STRING_OF_INT_DEX
		JMP @STRING_OF_INT_END
	STRING_OF_INT_DEX:
		DEC BX
		DEC DX
		PUSH DX
		XOR DX, DX
		DIV DI
		MOV SI, DX
		POP DX
		MOV CL, [CS:SI + @STRING_OF_INT_LF]
		MOV [BX], CL
		JMP @STRING_OF_INT_LOOP
	STRING_OF_INT_END:
		POP CX
		POP SI
		RET ULT
	STRING_OF_INT_LF: # DATA 1 '0123456789ABCDEF'
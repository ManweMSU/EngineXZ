importa canonicalis;
importa fenestrae;
importa lxx;
importa graphicum;
importa repulsus;
importa mathgraphici;
importa test_gp;

auxilium attributum (meta.attributum_nomen_moduli) = "Test XX Application";
auxilium attributum (meta.attributum_creator_moduli) = "Engine Software";
auxilium attributum (meta.attributum_iura_exempli) = "© Engine Software. 2025";
auxilium attributum (meta.attributum_versio) = "0.0.0.0";

auxilium icon (1) = "icon.eiwv";

[[systema] graphica]

ute fenestrae;

structura indutrix hereditat objectum {
	ordo frac vertices;
	ordo nint16 indices;

	!graphicum.series data_vertices;
	!graphicum.series data_indices;

	functio nihil adde_verticem((dfrac, dfrac, dfrac) pos, (dfrac, dfrac, dfrac) color, (dfrac, dfrac, dfrac) norm) iacit
	{
		vertices << pos.primus << pos.secundus << pos.tertius;
		vertices << color.primus << color.secundus << color.tertius;
		vertices << norm.primus << norm.secundus << norm.tertius;
	}
	functio nihil adde_triangulum(int i1, int i2, int i3) iacit
	{
		indices << nint16(vertices.longitudo / 9 + i1) << nint16(vertices.longitudo / 9 + i2) << nint16(vertices.longitudo / 9 + i3);
	}
	functio nihil ende(@graphicum.machinatio mach) iacit
	{
		graphicum.descriptio_seriei desc;
		graphicum.descriptio_datorum data;
		desc.longitudo = vertices.longitudo * int(magnitudo(frac));
		desc.longitudo_celulae = 9 * int(magnitudo(frac));
		desc.memoria = graphicum.classis_memoriae.immuta;
		desc.modus = graphicum.modus_auxilii.habilita_legendum_functionis;
		data.data = vertices.data;
		data_vertices = mach^.crea_seriem(desc, data);
		desc.longitudo = indices.longitudo * int(magnitudo(nint16));
		desc.longitudo_celulae = int(magnitudo(nint16));
		desc.modus = graphicum.modus_auxilii.habilita_legendum_indecis;
		data.data = indices.data;
		data_indices = mach^.crea_seriem(desc, data);
		si (!data_vertices || !data_indices) iace errores.memoria_nulla;
	}
}

structura callback : responsor_fenestrae, responsor_applicationis {
	!graphicum.machinatio mach;
	!graphicum.status_oleiductus oles;
	!graphicum.fundus_fenestrae fund;
	!graphicum.textura altitudo;
	!indutrix cubus;
	test_gp.configuratio conf;

	functio nihil crea_texturam_altitudinis(int x, int y) iacit
	{
		graphicum.descriptio_texturae desc;
		desc.dimensiones = graphicum.classis_texturae.singularis_duo_dimensiones;
		desc.formatus = graphicum.formatus_puncti.D32_frac;
		desc.latitudo = x;
		desc.altitudo = y;
		desc.numerus_subtilitatum = 1;
		desc.modus = graphicum.modus_auxilii.habilita_reddendum_altitudinis;
		desc.memoria = graphicum.classis_memoriae.defalta;
		altitudo = mach^.crea_texturam(desc);
	}
	functio nihil crea_statum() iacit
	{
		var liber = xw.test_gp.compila_functiones(mach);
		graphicum.descriptio_oleiductus desc;
		desc.functio_verticum = liber^.crea_functionem(Vertex.nomen);
		desc.functio_punctorum = liber^.crea_functionem(Punctum.nomen);
		desc.numerus_destinatorum = 1;
		desc.destinata[0].formatus = graphicum.formatus_puncti.B8G8R8A8_norm;
		desc.destinata[0].modus_reddendi = 0;
		desc.altitudo_et_praeforma.modus_reddendi =
			graphicum.modus_reddendi_altitudinis.habilita_probandum_altitudinis |
			graphicum.modus_reddendi_altitudinis.habilita_scribendum_altitudinis;
		desc.altitudo_et_praeforma.formatus = graphicum.formatus_puncti.D32_frac;
		desc.altitudo_et_praeforma.simile_altitudinis = graphicum.functio_consimilandi.minutior;
		desc.altitudo_et_praeforma.filtrum_scribendi_praeformae = 0;
		desc.altitudo_et_praeforma.filtrum_legendi_praeformae = 0;
		desc.discretus.modus_implendi = graphicum.modus_implendi.solidus;
		desc.discretus.modus_decerpendi = graphicum.modus_decerpendi.dorsualis;
		desc.discretus.favor_altitudinis = 0;
		desc.discretus.favor_altitudinis_clinatus = 0.0;
		desc.discretus.princeps_positivus_est = sic;
		desc.discretus.termen_favoris_altitudinis = 0.0;
		desc.discretus.habilita_decerpendum_altitudinis = sic;
		desc.ordo_primitivi = graphicum.ordo_primitivi.ordo_triangulorum;
		oles = mach^.crea_statum_oleiductus(desc);
	}
	functio nihil crea_cubus() iacit
	{
		cubus = crea(indutrix);
		cubus^.adde_verticem((-0.5, -0.5, -0.5), (0.0, 0.0, 0.0), (0.0, 0.0, -1.0));
		cubus^.adde_verticem((0.5, -0.5, -0.5), (1.0, 0.0, 0.0), (0.0, 0.0, -1.0));
		cubus^.adde_verticem((-0.5, 0.5, -0.5), (0.0, 1.0, 0.0), (0.0, 0.0, -1.0));
		cubus^.adde_verticem((0.5, 0.5, -0.5), (1.0, 1.0, 0.0), (0.0, 0.0, -1.0));
		cubus^.adde_triangulum(-4, -2, -3);
		cubus^.adde_triangulum(-3, -2, -1);
		cubus^.adde_verticem((-0.5, -0.5, -0.5), (0.0, 0.0, 0.0), (0.0, -1.0, 0.0));
		cubus^.adde_verticem((0.5, -0.5, -0.5), (1.0, 0.0, 0.0), (0.0, -1.0, 0.0));
		cubus^.adde_verticem((-0.5, -0.5, 0.5), (0.0, 0.0, 1.0), (0.0, -1.0, 0.0));
		cubus^.adde_verticem((0.5, -0.5, 0.5), (1.0, 0.0, 1.0), (0.0, -1.0, 0.0));
		cubus^.adde_triangulum(-4, -3, -2);
		cubus^.adde_triangulum(-2, -3, -1);
		cubus^.adde_verticem((-0.5, 0.5, -0.5), (0.0, 1.0, 0.0), (0.0, 1.0, 0.0));
		cubus^.adde_verticem((0.5, 0.5, -0.5), (1.0, 1.0, 0.0), (0.0, 1.0, 0.0));
		cubus^.adde_verticem((-0.5, 0.5, 0.5), (0.0, 1.0, 1.0), (0.0, 1.0, 0.0));
		cubus^.adde_verticem((0.5, 0.5, 0.5), (1.0, 1.0, 1.0), (0.0, 1.0, 0.0));
		cubus^.adde_triangulum(-4, -2, -3);
		cubus^.adde_triangulum(-3, -2, -1);
		cubus^.adde_verticem((-0.5, -0.5, 0.5), (0.0, 0.0, 1.0), (0.0, 0.0, 1.0));
		cubus^.adde_verticem((0.5, -0.5, 0.5), (1.0, 0.0, 1.0), (0.0, 0.0, 1.0));
		cubus^.adde_verticem((-0.5, 0.5, 0.5), (0.0, 1.0, 1.0), (0.0, 0.0, 1.0));
		cubus^.adde_verticem((0.5, 0.5, 0.5), (1.0, 1.0, 1.0), (0.0, 0.0, 1.0));
		cubus^.adde_triangulum(-4, -3, -2);
		cubus^.adde_triangulum(-2, -3, -1);
		cubus^.adde_verticem((0.5, -0.5, -0.5), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0));
		cubus^.adde_verticem((0.5, 0.5, -0.5), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0));
		cubus^.adde_verticem((0.5, -0.5, 0.5), (1.0, 0.0, 1.0), (1.0, 0.0, 0.0));
		cubus^.adde_verticem((0.5, 0.5, 0.5), (1.0, 1.0, 1.0), (1.0, 0.0, 0.0));
		cubus^.adde_triangulum(-4, -3, -2);
		cubus^.adde_triangulum(-2, -3, -1);
		cubus^.adde_verticem((-0.5, -0.5, -0.5), (0.0, 0.0, 0.0), (-1.0, 0.0, 0.0));
		cubus^.adde_verticem((-0.5, 0.5, -0.5), (0.0, 1.0, 0.0), (-1.0, 0.0, 0.0));
		cubus^.adde_verticem((-0.5, -0.5, 0.5), (0.0, 0.0, 1.0), (-1.0, 0.0, 0.0));
		cubus^.adde_verticem((-0.5, 0.5, 0.5), (0.0, 1.0, 1.0), (-1.0, 0.0, 0.0));
		cubus^.adde_triangulum(-4, -2, -3);
		cubus^.adde_triangulum(-3, -2, -1);
		cubus^.ende(mach);
	}
	functio nihil fenestra_creata_est(@fenestra fen) iacit redefini
	{
		var ~ con = consolatorium.currens()^;
		con.scribe_lineam("CREATED");
		fen^.erige_chronometrum(1, 30);
		var fab = graphicum.crea_fabricationem_machinationis();
		var dim = fen^.dimensiones_internae;
		mach = fab^.crea_machinationem();
		graphicum.descriptio_fundi_fenestrae dff;
		dff.latitudo = dim.x;
		dff.altitudo = dim.y;
		dff.formatus = graphicum.formatus_puncti.B8G8R8A8_norm;
		dff.modus = graphicum.modus_auxilii.habilita_reddendum_coloris | graphicum.modus_auxilii.habilita_legendum_functionis;
		fund = mach^.crea_fundum_fenestrae(fen, dff);
		crea_texturam_altitudinis(dim.x, dim.y);
		crea_statum();
		crea_cubus();
	}
	functio nihil fenestra_deleta_est(@fenestra fen) iacit redefini
	{
		var ~ con = consolatorium.currens()^;
		con.scribe_lineam("DESTROYED");
	}
	functio nihil expone_fenestram(@fenestra fen) iacit redefini
	{
		var dest = fund^.textura;
		var ctx = mach^.contextus;
		graphicum.prospectus_destinati_coloris rtvd;
		graphicum.prospectus_destinati_altitudinis dsvd;
		rtvd.textura = dest;
		rtvd.modus_onerandi = graphicum.modus_onerandi.depura;
		rtvd.color_depurandi[0] = 0.2;
		rtvd.color_depurandi[1] = 0.2;
		rtvd.color_depurandi[2] = 0.2;
		rtvd.color_depurandi[3] = 1.0;
		dsvd.textura = altitudo;
		dsvd.modus_onerandi_altitudinis = graphicum.modus_onerandi.depura;
		dsvd.modus_onerandi_praeformae = graphicum.modus_onerandi.derelinque;
		dsvd.valor_depurandi_altitudinis = 1.0;
		dsvd.valor_depurandi_praeformae = 0;
		si (ctx^.exordi_reddendum(1, @rtvd, @dsvd)) {
			var a1 = frac(systema.para_tempum_systemae() % nint(10000)) * frac.pi / frac(5000);
			var c = math.cos(a1);
			var s = math.sin(a1);
			var a2 = frac(systema.para_tempum_systemae() % nint(15000)) * frac.pi / frac(7500);
			var o = frac3(frac(4.0) * c, frac(4.0) * s, 8.0);
			conf.proj = math.graphicum.projector_perspectivus_angulatus(frac.pi / frac(4.0), frac(dest^.latitudo) / frac(dest^.altitudo), 0.01, 100.0) *
				math.graphicum.spectator(o, -o, frac3(0.0, 0.0, 1.0));
			conf.trans = math.graphicum.rotor(a2, frac3(1.0, 0.0, 0.0));
			conf.lt = frac3(1.0, 1.0, -1.0);
			conf.amb = 0.6;
			conf.diff = 0.4;
			ctx^.loca_adspectabilem(0.0, 0.0, dest^.latitudo, dest^.altitudo, 0.0, 1.0);
			ctx^.loca_statum_oleiductus(oles);
			ctx^.loca_auxilium_verticis(Vertex.selector_vdata, cubus^.data_vertices);
			ctx^.loca_constatum_verticis(Vertex.selector_wdata, @conf, magnitudo(conf));
			ctx^.loca_constatum_puncti(Punctum.selector_wdata, @conf, magnitudo(conf));
			ctx^.loca_indicis(cubus^.data_indices, graphicum.formatus_indecis.I16_int);
			ctx^.redde(cubus^.indices.longitudo, 0, 0, 9, 0);
			ctx^.ende();
		}
		dest.depura();
		fund^.exhibe();
	}
	functio nihil fenestra_closa_est(@fenestra fen) iacit redefini
	{
		var ~ con = consolatorium.currens()^;
		con.scribe_lineam("CLOSE");
		fen^.dele();
	}
	functio nihil fenestra_cressata_est(@fenestra fen) iacit redefini
	{
		var dim = fen^.dimensiones_internae;
		fund^.cressa(dim.x, dim.y);
		crea_texturam_altitudinis(dim.x, dim.y);
	}
	functio nihil chronometrus_fierit(@fenestra fen, nint indent) iacit redefini { fen^.invalida(); }
}

functio nihil primus() introitus iacit {
	proba {
		callback cb;

		var ~ con = consolatorium.alloca() acsi (xx.xc)^;
		var ~ sys = fenestrae.systema_fenestrarum.aediface(@cb);
		var ref_con = @con;
		var ref_sys = @sys;
		con.depura_cunctum();

		fenestrae.crea_fenestram_desc desc;
		desc.stylus = fenestrae.styli_fenestrae.cressata | fenestrae.styli_fenestrae.habet_titulum |
			fenestrae.styli_fenestrae.tactus_clode | fenestrae.styli_fenestrae.tactus_minima | fenestrae.styli_fenestrae.tactus_maxima;
		desc.dimensiones_maximae = fenestrae.positus(0, 0);
		desc.dimensiones_minimae = fenestrae.positus(200, 200);
		desc.parens = nullus;
		desc.positus = fenestrae.quadrum(100, 100, 500, 500);
		desc.responsor = @cb;
		desc.thema_tenebrosa = sic;
		desc.titulus = "ТЕСТ ГРАФИКИ";
		var fen = sys.crea_fenestram(desc);
		fen^.visibilis = sic;
		sys.exeque(sic);
	} cape (nintadl e1, nintadl e2) {
		linea E1, E2;
		errores.descriptio(e1, e2, E1, E2);
		actuarius.scribe(linea.forma("ERROR: %0 - %1", E1, E2));
	}
}